str(gaussian_data_G14)
attach(gaussian_data_G14)
library(ggplot2)
library(ggplot2)
# Convert data to long format
data_long <- tidyr::pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
library(ggplot2)
ggplot(data_long, aes(x = Time, y = Days, group_by(Compound))) +
geom_line() +
labs(x = "Time Point", y = "Days", title = "Days vs Time Point") +
theme_minimal()
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
str(gaussian_data_G14)
attach(gaussian_data_G14)
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
str(gaussian_data_G14)
attach(gaussian_data_G14)
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(data, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
ggplot(data_long, aes(x="Time", y="Days", col= Flower_index))
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
ggplot(data_long, aes(x="Time", y="Days", col= Flower_index))+ geom_line()
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
ggplot(data_long, aes(x="Time", y="Days", col= Flower_index))+ geom_boxplot()
ggplot(data_long, aes(x = Time, y = Days, col = factor(Flower_index))) +
geom_boxplot() +
labs(x = "Time Point", y = "Days", color = "Flower Index") +
theme_minimal()
str(data_long)
library(ggplot2)
ggplot(data_long, aes(x = Time, y = Days, fill = factor(Flower_index))) +
geom_boxplot() +
labs(x = "Time Point", y = "Days", fill = "Flower Index") +
theme_minimal()
library(ggplot2)
library(dplyr)
# Group the data by Flower_index
grouped_data <- data_long %>%
group_by(Flower_index)
# Create the box plot
ggplot(grouped_data, aes(x = Time, y = Days, fill = factor(Flower_index))) +
geom_boxplot() +
labs(x = "Time Point", y = "Days", fill = "Flower Index") +
theme_minimal()
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
str(gaussian_data_G14)
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
library(lme4)
# Fit the linear mixed effects model
model <- lmer(Flower_index ~ 0 + Compound + Time + Compound:Time + (1 | Flower_index), data = gaussian_data_G14)
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
count_data_G14 <- read.csv("count_data_G14.csv") %>% drop_na()
gaussian_data_G14 <- read.csv("gaussian_data_G14.csv")
library(lme4)
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
count_data_G14 %>%
group_by(compound) %>%
reframe(
Mean_Days = mean(tot.vase.days),
Standard_Deviation = sd(tot.vase.days)
) %>%
mutate(
Mean_Days = round(Mean_Days, 2),           # Round Mean_Days to two decimal places
Standard_Deviation = round(Standard_Deviation, 3)  # Round Standard_Deviation to three decimal places
) %>%
knitr::kable(
format = "markdown",                      #markdown format
col.names = c("Compound", "Mean_days", "Standard Deviation"),  # column names
align = c("l", "c", "c"),       # Align columns
caption = "Mean number of days and standard deviation by compound"  #  caption
)
# Convert 'garden' to factor
count_data_G14$garden <- factor(count_data_G14$garden)
count_data_G142<-count_data_G14
# Convert 'compound' to factor
count_data_G142$compound <- factor(count_data_G142$compound)
# Calculate means for each group
mean_data <- count_data_G142 %>%
group_by(garden, compound) %>%
reframe(mean_days = mean(tot.vase.days, na.rm = TRUE))
# Calculate the position for mean labels
mean_positions <- count_data_G142 %>%
group_by(compound) %>%
reframe(x = as.numeric(as.factor(compound))) %>%
mutate(y = 0)
# Merge mean_positions with mean_data to get garden information for each compound
mean_positions <- merge(mean_positions, mean_data, by = "compound", all.x = TRUE)
############################################################################################################################
# Plot
p1 <- ggplot(count_data_G14, aes(x = compound, y = tot.vase.days, col = garden)) +
geom_smooth() +
geom_point() +
facet_wrap(~ species, labeller = labeller(species = c("1" = "Species 1", "2" = "Species 2"))) +
scale_x_continuous(breaks = 1:15, labels = 1:15)+theme_classic()+xlab("Compound Label")
# Add mean labels to the strip with dodge position
p1 <- p1 + labs(caption = "Note: The average number of days flower stays fresh", size=3)+
geom_text(data = mean_positions, aes(x = x, y = y, label = round(mean_days, 1), angle = 90, color = garden),
position = position_dodge(width = 0.75), vjust = -0.5, size = 2)
# Save as PNG
ggsave("plot.png", plot = p1, width = 10, height = 6, units = "in", dpi = 300)
p1
# Plot with box plots for each compound and garden
p3 <- ggplot(count_data_G142, aes(x = compound, y = tot.vase.days, fill = garden, group = interaction(compound, garden))) +
geom_boxplot(position = position_dodge(width = 0.75)) +
facet_wrap(~ species, labeller = labeller(species = c("1" = "Species 1", "2" = "Species 2"))) +
scale_x_discrete(labels = 1:15)  +
xlab("Compound label") + ylab("No. of Days flower stays fresh") +
theme(strip.placement = "outside") +
theme_classic()
# Add mean labels to the strip with dodge position
p3 <- p3 + labs(caption = "Note: The average number of days flower stays fresh", size=3)+
geom_text(data = mean_positions, aes(x = x, y = y, label = round(mean_days, 1), angle = 90, color = garden),
position = position_dodge(width = 0.75), vjust = -0.5, size = 3)
# Save as PNG
ggsave("plot2.png", plot = p3, width = 10, height = 6, units = "in", dpi = 300)
p3
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(readr)
count_data_G14 <- read.csv("count_data_G14.csv") %>% drop_na()
gaussian_data_G14 <- read.csv("gaussian_data_G14.csv")
library(lme4)
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
count_data_G14 %>%
group_by(compound) %>%
reframe(
Mean_Days = mean(tot.vase.days),
Standard_Deviation = sd(tot.vase.days)
) %>%
mutate(
Mean_Days = round(Mean_Days, 2),           # Round Mean_Days to two decimal places
Standard_Deviation = round(Standard_Deviation, 3)  # Round Standard_Deviation to three decimal places
) %>%
knitr::kable(
format = "markdown",                      #markdown format
col.names = c("Compound", "Mean_days", "Standard Deviation"),  # column names
align = c("l", "c", "c"),       # Align columns
caption = "Mean number of days and standard deviation by compound"  #  caption
)
# Convert 'garden' to factor
count_data_G14$garden <- factor(count_data_G14$garden)
count_data_G142<-count_data_G14
# Convert 'compound' to factor
count_data_G142$compound <- factor(count_data_G142$compound)
# Calculate means for each group
mean_data <- count_data_G142 %>%
group_by(garden, compound) %>%
reframe(mean_days = mean(tot.vase.days, na.rm = TRUE))
# Calculate the position for mean labels
mean_positions <- count_data_G142 %>%
group_by(compound) %>%
reframe(x = as.numeric(as.factor(compound))) %>%
mutate(y = 0)
# Merge mean_positions with mean_data to get garden information for each compound
mean_positions <- merge(mean_positions, mean_data, by = "compound", all.x = TRUE)
############################################################################################################################
# Plot
p1 <- ggplot(count_data_G14, aes(x = compound, y = tot.vase.days, col = garden)) +
geom_smooth() +
geom_point() +
facet_wrap(~ species, labeller = labeller(species = c("1" = "Species 1", "2" = "Species 2"))) +
scale_x_continuous(breaks = 1:15, labels = 1:15)+theme_classic()+xlab("Compound Label")
# Add mean labels to the strip with dodge position
p1 <- p1 + labs(caption = "Note: The average number of days flower stays fresh", size=3)+
geom_text(data = mean_positions, aes(x = x, y = y, label = round(mean_days, 1), angle = 90, color = garden),
position = position_dodge(width = 0.75), vjust = -0.5, size = 2)
# Save as PNG
ggsave("plot.png", plot = p1, width = 10, height = 6, units = "in", dpi = 300)
p1
# Plot with box plots for each compound and garden
p3 <- ggplot(count_data_G142, aes(x = compound, y = tot.vase.days, fill = garden, group = interaction(compound, garden))) +
geom_boxplot(position = position_dodge(width = 0.75)) +
facet_wrap(~ species, labeller = labeller(species = c("1" = "Species 1", "2" = "Species 2"))) +
scale_x_discrete(labels = 1:15)  +
xlab("Compound label") + ylab("No. of Days flower stays fresh") +
theme(strip.placement = "outside") +
theme_classic()
# Add mean labels to the strip with dodge position
p3 <- p3 + labs(caption = "Note: The average number of days flower stays fresh", size=3)+
geom_text(data = mean_positions, aes(x = x, y = y, label = round(mean_days, 1), angle = 90, color = garden),
position = position_dodge(width = 0.75), vjust = -0.5, size = 3)
# Save as PNG
ggsave("plot2.png", plot = p3, width = 10, height = 6, units = "in", dpi = 300)
p3
View(data_long)
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
table(data_long$Compound)
str(gaussian_data_G14)
names(data_long)
skimr::skim(gaussian_data_G14)
str(gaussian_data_G14)
View(gaussian_data_G14)
# Fit a linear mixed model
model <- lmer(tot.vase.days ~ compound + T_0 + T_1 + T_2 + T_3 + T_4 + T_5 + T_6 + T_7 + T_8 + T_9 + T_10 + T_11 + T_12 + T_13 + T_14 + T_15 + T_16 + T_17 + T_18 + T_19 + T_20 + (1 | rater) + (1 | garden) + (1 | subplotID), data = gaussian_data_G14)
count_data_G14 <- read.csv("count_data_G14.csv") %>% drop_na()
gaussian_data_G14 <- read.csv("gaussian_data_G14.csv")
names(gaussian_data_G14)
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Days")
ggplot(gaussian_data_G14, aes(Flower_index,Days))
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
attach(data_long)
ggplot(gaussian_data_G14, aes(Flower_index,width))
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
attach(data_long)
ggplot(gaussian_data_G14, aes(Flower_index,Width))+ geom_point()
str(data_long)
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
attach(data_long)
# Create the plot
ggplot(data_long, aes(x = Time, y = Width)) +
geom_boxplot() +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time Faceted by Compound")
# Create the plot with smoothing lines and points
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time Faceted by Compound")
library(ggplot2)
# Convert Time to a factor for proper ordering on the x-axis
data_long$Time <- factor(data_long$Time, levels = unique(data_long$Time))
# Create the plot with smoothing lines, points, and regression line
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time Faceted by Compound")
library(ggplot2)
# Convert Time to a factor for proper ordering on the x-axis
data_long$Time <- factor(data_long$Time, levels = unique(data_long$Time))
# Create the plot with smoothing lines, points, and mean regression line
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_smooth(method = "lm", aes(group = Compound), color = "black", se = FALSE, fullrange = TRUE, linetype = "dashed") +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time Faceted by Compound")
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
attach(data_long)
# Convert Time to a factor for proper ordering on the x-axis
data_long$Time <- factor(data_long$Time, levels = unique(data_long$Time))
# Create the plot with smoothing lines, points, and mean regression line
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_smooth(method = "lm", aes(group = Compound), color = "black", se = FALSE, fullrange = TRUE, linetype = "dashed") +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time Faceted by Compound")
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
attach(data_long)
# Convert Time to a factor for proper ordering on the x-axis
data_long$Time <- factor(data_long$Time, levels = unique(data_long$Time))
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", se = FALSE, na.rm = TRUE) +
geom_smooth(method = "lm", aes(group = Compound), color = "black", se = FALSE, fullrange = TRUE, linetype = "dashed", na.rm = TRUE) +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time Faceted by Compound")
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
attach(data_long)
# Convert Time to a factor for proper ordering on the x-axis
data_long$Time <- factor(data_long$Time, levels = unique(data_long$Time))
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", se = FALSE, na.rm = TRUE) +
geom_smooth(method = "lm", aes(group = Compound), color = "black", se = FALSE, fullrange = TRUE, linetype = "dashed", na.rm = TRUE) +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time Faceted by Compound")
knitr::opts_chunk$set(echo = F, message = FALSE)
library(tidyverse)
library(readr)
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
attach(data_long)
# Convert Time to a factor for proper ordering on the x-axis
data_long$Time <- factor(data_long$Time, levels = unique(data_long$Time))
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", se = FALSE, na.rm = TRUE) +
geom_smooth(method = "lm", aes(group = Compound), color = "black", se = FALSE, fullrange = TRUE, linetype = "dashed", na.rm = TRUE) +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time Faceted by Compound")
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
data_long <- data_long %>%
mutate(Time = as.numeric(gsub("T_", "", Time)))
attach(data_long)
# Convert Time to a factor for proper ordering on the x-axis
data_long$Time <- factor(data_long$Time, levels = unique(data_long$Time))
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", se = FALSE, na.rm = TRUE) +
geom_smooth(method = "lm", aes(group = Compound), color = "black", se = FALSE, fullrange = TRUE, linetype = "dashed", na.rm = TRUE) +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time Faceted by Compound")
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
data_long <- data_long %>%
mutate(Time = as.numeric(gsub("T_", "", Time)))
attach(data_long)
# Convert Time to a factor for proper ordering on the x-axis
data_long$Time <- factor(data_long$Time, levels = unique(data_long$Time))
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", se = FALSE, na.rm = TRUE) +
geom_smooth(method = "lm", aes(group = Compound), color = "black", se = FALSE, fullrange = TRUE, linetype = "dashed", na.rm = TRUE) +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time faceted by Compound")+theme_classic()
# str(gaussian_data_G14)
attach(gaussian_data_G14)
# Reshape data to long format
data_long <- pivot_longer(gaussian_data_G14, cols = starts_with("T_"), names_to = "Time", values_to = "Width")
data_long <- data_long %>%
mutate(Time = as.numeric(gsub("T_", "", Time)))
attach(data_long)
# Convert Time to a factor for proper ordering on the x-axis
data_long$Time <- factor(data_long$Time, levels = unique(data_long$Time))
ggplot(data_long, aes(x = Time, y = Width, color = factor(Compound))) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", se = FALSE, na.rm = TRUE) +
geom_smooth(method = "lm", aes(group = Compound), color = "black", se = FALSE, fullrange = TRUE, linetype = "dashed", na.rm = TRUE) +
facet_wrap(~ Compound) +
labs(x = "Time", y = "Width", title = "Width vs. Time faceted by Compound")
str(data_long)
library(lme4)
# Assuming your data frame is named 'flower_data'
lmm <- lmer(Width ~ Time + Compound + Garden + (1 | Subplot) + (1 | Rater) + (1 | Type), data = data_long)
library(lme4)
# Assuming your data frame is named 'flower_data'
lmm <- lmer(Width ~ Compound + Garden +(1|Flower_index) + (1 | Subplot) + (1 | Rater) + (1 | Type), data = data_long)
table(gaussian_data_G14$Rater)
library(lme4)
# Assuming your data frame is named 'flower_data'
lmm <- lmer(Width ~ Compound + Garden +(1|Flower_index) + (1 | Subplot)  + (1 | Type), data = data_long)
library(lme4)
# Assuming your data frame is named 'flower_data'
lmm <- lmer(Width ~ Compound + Garden +(1|Flower_index) + (1 | Subplot)  + (1 | Type), data = data_long)
library(lme4)
# Assuming your data frame is named 'flower_data'
lmm <- lmer(Width ~ Compound + Garden +(1|Flower_index) + (1 | Subplot)  + (1 | Type), data = data_long)
summary(lmm)
library(lme4)
# Assuming your data frame is named 'flower_data'
lmm <- lmer(Width ~ Compound + Garden +(1|Flower_index) + (1 | Subplot)  + (1 | Type), data = data_long)
summary(lmm)
library(lme4)
# Assuming your data frame is named 'flower_data'
lmm <- lmer(Width ~ Compound + Garden +(1|Flower_index) + (1 | Subplot)  + (1 | Type), data = data_long)
summary(lmm)
summarise(data_long)
table(data_long$Compound)
# Load the lme4 package
library(lme4)
# Fit the linear mixed model
model <- lmer(Width ~ Type + Compound + (1 | Subplot) + (1 | Flower_index), data = data_long)
# Print the summary of the model
summary(model)
# Load the lme4 package
library(lme4)
# Fit the linear mixed model
model <- lmer(Flower_Width ~ Type + Compound + (1 | Subplot) + (1 | Flower_index), data = data_long)
# Load the lme4 package
library(lme4)
# Fit the linear mixed model
model <- lmer(Width ~ Type + Compound + (1 | Subplot) + (1 | Flower_index), data = data_long)
# Print the summary of the model
summary(model)
data_long$Compound<- as.factor(data_long$Compound)
# Load the lme4 package
library(lme4)
# Fit the linear mixed model
model <- lmer(Width ~ Type + Compound + (1 | Subplot) + (1 | Flower_index), data = data_long)
# Print the summary of the model
summary(model)
# Compound is a factor
data_long$Compound <- as.factor(data_long$Compound)
# Load the lme4 package
library(lme4)
# Fit the linear mixed model
model <- lmer(Width ~ Type + Compound + (1 | Subplot) + (1 | Flower_index), data = data_long)
# Print the summary of the model
summary(model)
2054*2043
dbinom(8,10,0.5)
dbinom(8,9,0.5)
# Perform the sign test
binom.test(8, 10, p = 0.5, alternative = "greater")
# Perform the sign test
binom.test(8, 9, p = 0.5, alternative = "greater")
# Perform the sign test including the tie
binom.test(8, 9, p = 0.5, alternative = "greater")
# Perform the sign test including the tie
binom.test(8, 9, p = 0.5, alternative = "less")
setwd("E:/Data-Visualization-Project/dvpapp/src/lib/data")
# Load the ggmap package
library(ggmap)
# Set your Google Maps API key
register_google(key = "AIzaSyCeNK1xwxd3L739ccim-uh_q32mpsm85kE")
# Load the data
customers <- read.csv("Plants.csv")
# Load the data
Plants <- read.csv("Plants.csv")
# Geocode the addresses
geocodes <- lapply(1:nrow(Plants), function(i) {
result <- try(geocode(paste(Plants$PlantCity[i], sep = ", ")), silent = TRUE)
if (inherits(result, "try-error")) {
return(data.frame(lat = NA, lon = NA))
} else {
return(result)
}
})
# Combine the geocodes with the original data
geocoded_customers <- cbind(Plants, do.call(rbind, geocodes))
# Save the geocoded data to a new CSV file
write.csv(Plants, "geocoded_plants.csv", row.names = FALSE)
View(geocodes)
# Combine the geocodes with the original data
geocoded_plants <- cbind(Plants, do.call(rbind, geocodes))
# Save the geocoded data to a new CSV file
write.csv(geocoded_plants, "geocoded_plants.csv", row.names = FALSE)
library(readr)
geocoded_plants <- read_csv("geocoded_plants.csv")
View(geocoded_plants)
